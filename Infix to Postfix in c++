#include<bits/stdc++.h>
#include<stack>
using namespace std;

class Infix_to_postfix
{
    public:

int isoperand(char b)
    {
        if( b== '+' || b== '-' || b== '/' || b== '*')
        {
            return 0;
        }
        else
        {
            return 1;
        }
        return -1;
    }

    int precedence(char c)
    {
        if( c== '+' || c== '-')
        {
            return 1;
        }else if(c== '/' || c== '*')
        {
            return 2;
        }
        return 0;
    }

    void Intopostfix(string a)
    {
        stack<char> s;
        string postfix;
        for(int i=0;i<a.length();i++)
        {
            char itop=a[i];
            if(isoperand(itop))
            {
                postfix+=a[i];
            }
            else
            {
                    while(!s.empty() && precedence(itop)<=precedence(s.top()))
                    {
                            postfix+=s.top();
                            s.pop();
                    }
                    s.push(char(a[i]));                        //char(a[i])  or itop
            }
        }
        while(!s.empty())
        {
            postfix+=s.top();
            s.pop();
        }
        cout<<"Postfix Expression::"<<postfix<<endl;
    }


 };
int main()
{
     Infix_to_postfix ItoP;
        string ex;
        cout<<"Enter Infix Expresion::";
        cin>>ex;
        cout<<"Infix Expresion::"<<ex<<endl;
        ItoP.Intopostfix(ex);
    return 0;
}
