#include<stdio.h>
#include<stdlib.h>
#define null 0
struct node       //it can be structure which  define the node left right and data
{
    struct node *left;
    int data;
    struct node *right;
};


struct node *Create(struct node *temp,int x)//creating the binary binary search tree
{
    if(temp==NULL)
    {
     struct node *temp1=(struct node *)malloc(sizeof(struct node));
          temp1->data=x;
          temp1->left=NULL;
          temp1->right=NULL;
          return temp1;
    }
    if(x<temp->data)
    {
        temp->left=Create(temp->left,x);
    }
    else
    {
        temp->right=Create(temp->right,x);
    }
    return temp;
}
void Pre(struct node *p)//pre order of  binary search tree
{
    if(p==NULL)
    {
        return ;
    }
    printf("%d,",p->data);
    Pre(p->left);
    Pre(p->right);
}
void In(struct node *p)//in order of  binary search tree
{
    if(p==NULL)
    {
        return ;
    }
    In(p->left);
    printf("%d,",p->data);
    In(p->right);
}
void Post(struct node *p)//post order of  binary search tree
{
    if(p==NULL)
    {
        return ;
    }
    Post(p->left);
    Post(p->right);
    printf("%d,",p->data);
}
int Countnodes(struct node *p)//count the nodes of the node of the binary search tree
{
    if(p==NULL)
    {
        return ;
    }
    return Countnodes(p->left)+Countnodes(p->right)+1;
}
int Countheight(struct node *p)//count the height of the node of the binary search tree
{
    if(p==NULL)
    {
        return ;
    }
        int x=Countheight(p->left);
        int y=Countheight(p->right);
        if(x>y)
        {
            return x+1;
        }
        else
        {
            return y+1; 
        }
}
int Countsum(struct node *p) //count the sum of the node of the binary search tree
{
    if(p==NULL)
    {
        return ;
    }
      return (p->data)+Countsum(p->left)+Countsum(p->right);
}

void Insert(struct node *p)      //it can be enter the node in the binary search tree
{
    int x;
    printf("\nEnter the data you want to enter::");
    scanf("%d",&x);
    struct node *z=p;
     while(p!=NULL)
     {     z=p;
         if(p->data==x)
         {
             printf("\nDublicate number you can enter\n");
             break;
         }
         else if(x < p->data)
         {
             p=p->left;
         }
         else
         {
             p=p->right;
         }
     }
         struct node *temp=(struct node *)malloc(sizeof(struct node));
         temp->data=x;
         if(x == z->data)
         {
             return ;
         }
     else if(x < z->data)
     {
         z->left=temp;
     }
     else
     {
         z->right=temp;
     }
     printf("\nnode is insert in binary tree\n");
}

struct node *minvalue(struct node *p)//it is for the minimum value from right of the left tree
{
    while((p && p->left) != NULL)   /* loop down to find the leftmost leaf */
    {
        p=p->left;
    }
    return p;
}
struct node *Delete(struct node *p,int x)//it is use to delete the element in binary search tree
{
    if(p==NULL)
    {
        return p;
    }
  if(x<p->data)
  {
      p->left=Delete(p->left,x);
  }
  else if(x>p->data)
  {
      p->right=Delete(p->right,x);
  }
  else
  {
      if(p->left==NULL)
      {
          struct node *temp=p->right;
          free(p);
          return temp;
      }
      else if(p->right==NULL)
      {
          struct node *temp=p->left;
          free(p);
          return temp;
      }
          struct node *temp=minvalue(p->right);
          p->data=temp->data;
          p->right=Delete(p->right,temp->data);
  }
      return p;
}
void Search(struct node *p)//it is use to find the element in binary search tree
{
    int x;
    printf("\nEnter the data you want to search::");
    scanf("%d",&x);
    while(p!=NULL)
    {
        if(x==p->data)
        {
            printf("\nelement is found\n");
            break;
        }else if(x < p->data)
        {
            p=p->left;
        }
        else
        {
            p=p->right;
        }
    }
    if(p==NULL)
    {
        printf("\nElement is not found\n");
    }
}


int main()
{
    
    struct node *root;
    root=Create(root,10);
    Create(root,1011);
    Create(root,0);
    Create(root,1);
    Create(root,12);
    Create(root,11);
    Create(root,9);
    Create(root,5);
    Create(root,101);
    printf("\nPre order of the binary tree::");
    Pre(root);
    printf("\nIn order of the binary tree::");
    In(root);
    printf("\nPost order of the binary tree::");
    Post(root);
   printf("\nCount number of nodes in binary search tree::%d", Countnodes(root));
    printf("\nHeight of binary search tree::%d", Countheight(root));
    printf("\nsum of binary search tree::%d", Countsum(root));
    
    while(1)
    {
        printf("\nEnter 1 for Insert in binary search tree");
        printf("\nEnter 2 for delete in binary search tree");
        printf("\nEnter 3 for search in binary search tree");
        printf("\nEnter 4 for EXIT in binary search tree\n");
        int n;
        scanf("%d",&n);
        switch(n)
        {
            case 1:
            {
                Insert(root);
                In(root);
                break;
            }
            case 2:
            {
                int x;
                printf("\nEnter the data you want to delete::");
                scanf("%d",&x);
                Delete(root,x);
                printf("\nIn order of the binary tree::");
    In(root);
                break;
            }
            case 3:
            {
                Search(root);
                break;
            }
            // case 4:
            // {
            //     exit(0); 
            //     break;
            // }
        }
    }
    printf("\n\nTree opration is complate\n\n");
   return 0;
}
