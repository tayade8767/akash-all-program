#include<stdio.h>
#include<stdlib.h>
#define null 0

struct node 
{
    struct node *left;
    int data;
    struct node *right;
};

struct node *create()
{
   int x,value;
    struct node *temp;
    temp=(struct node *)malloc(sizeof(struct node));
    printf("enter 0 for NO node\n");
    printf("enter 1 for create node\n");
    scanf("%d",&x);
    if(x==0)
    {
        return 0;
    }
    printf("enter the node value::");
    scanf("%d",&value);
    temp->data=value;
    printf("enter the left child of %d\n",value);
    temp->left=create();
    printf("enter the right child of %d\n",value);
    temp->right=create();
    return temp;
}

void pre(struct node *p)
{
    if(p)
    {
       printf("%d,",p->data);
       pre(p->left);
       pre(p->right);
    }
}

void in(struct node *p)
{
    if(p)
    {
       in(p->left);
       printf("%d,",p->data);
       in(p->right);
    }
}

void post(struct node *p)
{
    if(p)
    {
       post(p->left);
       post(p->right);
       printf("%d,",p->data);
    }
}

int node_count(struct node *p)
{
    int x,y;
    if(p)
    {
       x=node_count(p->left);
       y=node_count(p->right);
       return x+y+1;
    }
    return 0;
}

int degree_two_nodes(struct node *p)
{
    int x,y;
    if(p!=NULL)
    {
       x=degree_two_nodes(p->left);
       y=degree_two_nodes(p->right);
       if(p->left && p->right)
       {
         return x+y+1;
       }
    }
    return 0;
}
int count=0;

int leaf_nodes(struct node *p)
{
    int x,y;
    if(p!=null)
    {
      x=leaf_nodes(p->left);
      y=leaf_nodes(p->right);
      if(p->right== null && p->left== null)
      {
        printf("%d,",p->data);
         return x+y+1;
      }
      else{
        return x+y;
      }
    }
    return 0;
}

int degree_one_NodeCount(struct node *p) 
{
    int x;
    int y;
    if (p!=null)
    {
        x=degree_one_NodeCount(p->left);
        y=degree_one_NodeCount(p->right);
        if (p->right== null  || p->left== null ){
            return x+y+1;
        } else {
            return x+y;
        }
    }
    return 0;
}














int sum_of_nodes_data(struct node *p)
{
    int x,y;
    if(p!=NULL)
    {
      x=sum_of_nodes_data(p->left);
      y=sum_of_nodes_data(p->right);
         return x+y+(p->data);
    }
    return 0;
}

int main()
{
    int a,b,c,d,e;
    struct node *root;
    root=create();
    printf("tree created succesfully\n");

    printf("preorder of the tree::");
    pre(root);

    printf("\ninorder of the tree::");
    in(root);

    printf("\npostorder of the tree::");
    post(root);

    printf("\nnumber of nodes in tree::");
    a=node_count(root);
    printf("%d",a);

    printf("\nnumber of nodes in tree with degree 2::");
    b=degree_two_nodes(root);
    printf("%d",b);

    printf("\nleaf nodes in tree::");
    c=leaf_nodes(root);
    printf("\n");
    printf("\nnumber of leaf nodes in tree::");
    printf("%d",c);

    printf("\ntoatl of nodes data in tree::");
    d=sum_of_nodes_data(root);
    printf("%d",d);

    printf("\nnumber of nodes in tree with degree 1::");
    e=degree_one_NodeCount(root);
    printf("%d",e);
    
  return(0);  
}
